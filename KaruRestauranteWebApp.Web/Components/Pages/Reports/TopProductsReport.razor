@page "/reports/top-products"
@using KaruRestauranteWebApp.Common.Resources
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using KaruRestauranteWebApp.Models.Models
@using KaruRestauranteWebApp.Models.Models.Reports
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject ApiClient ApiClient
@inject IStringLocalizer<Resource> L
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Reporte de Productos Más Vendidos - Sistema Karú</PageTitle>

<RadzenStack Gap="1rem">
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="8">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                <RadzenIcon Icon="trending_up" IconStyle="IconStyle.Primary" Style="font-size: 2.2rem;" />
                <RadzenText TextStyle="TextStyle.H4" class="rz-mb-0">Top Productos Más Vendidos</RadzenText>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-end rz-mt-2 rz-mt-md-0">
            <RadzenButton Click="@(() => NavigationManager.NavigateTo("/reports/dashboard"))"
                          Text="Volver al Dashboard"
                          Icon="dashboard"
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="width: auto;"
                          class="rz-m-1" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenCard class="rz-my-6 rz-shadow-5 rz-p-4" style="max-width: 1400px; margin-inline: auto;">
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.H6" class="rz-mb-3">Filtros de Búsqueda</RadzenText>
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3" class="rz-p-2">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Fecha Inicial</RadzenText>
                        <RadzenDatePicker @bind-Value="@startDate"
                                          DateFormat="dd/MM/yyyy"
                                          Class="w-100"
                                          Change="@ClearData"
                                          ShowTime="false"
                                          ShowToday="true"
                                          TodayText="Hoy"
                                          Placeholder="Seleccione fecha inicial" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3" class="rz-p-2">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Fecha Final</RadzenText>
                        <RadzenDatePicker @bind-Value="@endDate"
                                          DateFormat="dd/MM/yyyy"
                                          Class="w-100"
                                          Change="@ClearData"
                                          ShowTime="false"
                                          ShowToday="true"
                                          TodayText="Hoy"
                                          Placeholder="Seleccione fecha final" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3" class="rz-p-2">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Cantidad de Productos</RadzenText>
                        <RadzenNumeric @bind-Value="@limit" 
                                      Min="1" 
                                      Max="50"
                                      Class="w-100" 
                                      Change="@ClearData" TValue="int"/>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3" class="rz-p-2 rz-d-flex rz-align-items-end">
                    <RadzenButton Click="@LoadTopProductsReport"
                                  Text="Generar Reporte"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Icon="search"
                                  Class="w-100"
                                  Disabled="@isLoading" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>

    @if (isLoading)
    {
        <RadzenRow class="rz-mt-4">
            <RadzenColumn Size="12">
                <RadzenCard class="rz-shadow-2 rz-p-6 rz-text-align-center">
                    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="1rem">
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 50%; height: 8px;" />
                        <RadzenText TextStyle="TextStyle.Body1">Analizando productos más vendidos...</RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    }
    else if (topProducts != null && topProducts.Any())
    {
        <RadzenRow class="rz-mt-4">
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenCard class="rz-shadow-3 rz-p-4 rz-mb-4 rz-border-radius-6" Style="background: linear-gradient(135deg, var(--rz-primary-lighter) 0%, var(--rz-primary-light) 100%); color: var(--rz-text-contrast-color);">
                    <RadzenStack Gap="0.8rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="shopping_cart" Style="font-size: 1.5rem;" />
                            <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-mb-0">Producto más vendido</RadzenText>
                        </RadzenStack>
                        <RadzenText TextStyle="TextStyle.H4" class="rz-mb-0">
                            @topProducts.First().ProductName
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Caption" class="rz-mb-0">
                            @topProducts.First().QuantitySold unidades - ₡@String.Format("{0:N0}", topProducts.First().TotalSales)
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenCard class="rz-shadow-3 rz-p-4 rz-mb-4 rz-border-radius-6" Style="background: linear-gradient(135deg, var(--rz-success-lighter) 0%, var(--rz-success-light) 100%); color: var(--rz-text-contrast-color);">
                    <RadzenStack Gap="0.8rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="inventory" Style="font-size: 1.5rem;" />
                            <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-mb-0">Total Unidades Vendidas</RadzenText>
                        </RadzenStack>
                        <RadzenText TextStyle="TextStyle.H4" class="rz-mb-0">
                            @topProducts.Sum(x => x.QuantitySold)
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Caption" class="rz-mb-0">
                            Unidades vendidas en el período
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenCard class="rz-shadow-3 rz-p-4 rz-mb-4 rz-border-radius-6" Style="background: linear-gradient(135deg, var(--rz-info-lighter) 0%, var(--rz-info-light) 100%); color: var(--rz-text-contrast-color);">
                    <RadzenStack Gap="0.8rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="attach_money" Style="font-size: 1.5rem;" />
                            <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-mb-0">Ventas Totales</RadzenText>
                        </RadzenStack>
                        <RadzenText TextStyle="TextStyle.H4" class="rz-mb-0">
                            @String.Format("₡{0:N0}", topProducts.Sum(x => x.TotalSales))
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Caption" class="rz-mb-0">
                            Total generado en el período
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mt-4">
            <RadzenColumn Size="12">
                <RadzenCard class="rz-shadow-3 rz-p-4 rz-mb-4 rz-border-radius-6">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H5">Gráfico de Productos Más Vendidos</RadzenText>

                        <div class="chart-container" style="height: 350px;">
                            <RadzenChart>
                                <RadzenBarSeries Data="@topProducts.Take(10).ToList()" CategoryProperty="ProductName" Title="Ventas Totales" ValueProperty="TotalSales">
                                    <RadzenSeriesDataLabels Visible="true" Position="DataLabelsPosition.Outside" />
                                </RadzenBarSeries>
                                <RadzenValueAxis>
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Ventas (₡)" />
                                </RadzenValueAxis>
                                <RadzenCategoryAxis>
                                    <RadzenGridLines Visible="false" />
                                    <RadzenAxisTitle Text="Producto" />
                                </RadzenCategoryAxis>
                                <RadzenLegend Position="LegendPosition.Bottom" />
                            </RadzenChart>
                        </div>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mt-4">
            <RadzenColumn Size="12">
                <RadzenCard class="rz-shadow-3 rz-p-4 rz-border-radius-6">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H5" class="rz-mb-3">Listado de Productos Más Vendidos</RadzenText>

                        <RadzenDataGrid @ref="dataGrid"
                                        Data="@topProducts"
                                        TItem="ProductSalesReportDTO"
                                        AllowSorting="true"
                                        AllowPaging="true"
                                        PageSize="10"
                                        AllowFiltering="true"
                                        FilterMode="FilterMode.Advanced"
                                        AllowColumnResize="true"
                                        Style="height: 400px;"
                                        RowRender="@OnRowRender"
                                        EmptyText="No hay datos disponibles para mostrar">
                            <Columns>
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Property="ProductID" Title="ID" Width="80px" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Property="ProductName" Title="Producto" Width="200px">
                                    <FooterTemplate>
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Total:</RadzenText>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Property="CategoryName" Title="Categoría" Width="150px" />
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Property="QuantitySold" Title="Unidades Vendidas" Width="150px" TextAlign="TextAlign.Right">
                                    <FooterTemplate>
                                        <RadzenText TextStyle="TextStyle.Subtitle2">@topProducts.Sum(x => x.QuantitySold)</RadzenText>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Property="TotalSales" Title="Ventas Totales" FormatString="₡{0:N0}" TextAlign="TextAlign.Right" Width="150px">
                                    <FooterTemplate>
                                        <RadzenText TextStyle="TextStyle.Subtitle2">@String.Format("₡{0:N0}", topProducts.Sum(x => x.TotalSales))</RadzenText>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Property="Percentage" Title="% del Total" FormatString="{0:N2}%" TextAlign="TextAlign.Right" Width="120px" />
                                <RadzenDataGridColumn TItem="ProductSalesReportDTO" Width="150px" Title="Participación" TextAlign="TextAlign.Right">
                                    <Template Context="data">
                                        <RadzenProgressBar Value="@((double)data.Percentage)" Style="width: 90%;">
                                            <ChildContent>
                                                @($"{data.Percentage:N2}%")
                                            </ChildContent>
                                        </RadzenProgressBar>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <RadzenRow class="rz-mt-4">
            <RadzenColumn Size="12">
                <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Filled" Class="rz-shadow-3">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                        <RadzenIcon Icon="error_outline" />
                        <RadzenText>@errorMessage</RadzenText>
                    </RadzenStack>
                </RadzenAlert>
            </RadzenColumn>
        </RadzenRow>
    }
    else if (hasSearched)
    {
        <RadzenRow class="rz-mt-4">
            <RadzenColumn Size="12">
                <RadzenCard class="rz-shadow-3 rz-p-4 rz-text-align-center">
                    <RadzenStack AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenIcon Icon="search_off" Style="font-size: 3rem; color: var(--rz-text-disabled-color);" />
                        <RadzenText TextStyle="TextStyle.H6">No se encontraron datos para el período seleccionado</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">Intente con un rango de fechas diferente o verifique que existan ventas registradas en el sistema.</RadzenText>
                        <RadzenButton Click="@LoadTopProductsReport" Text="Reintentar" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    }
</RadzenStack>

@code {
    private DateTime startDate = DateTime.Now.Date.AddDays(-30);
    private DateTime endDate = DateTime.Now.Date;
    private List<ProductSalesReportDTO> topProducts = new();
    private bool isLoading = false;
    private bool hasSearched = false;
    private string errorMessage = string.Empty;
    private int limit = 10;
    private RadzenDataGrid<ProductSalesReportDTO> dataGrid;

    protected override async Task OnInitializedAsync()
    {
        // Configurar fechas para mostrar último mes por defecto
        startDate = DateTime.Now.Date.AddDays(-30);
        endDate = DateTime.Now.Date;

        // Cargar los datos inicialmente
        await LoadTopProductsReport();
    }

    private void OnRowRender(RowRenderEventArgs<ProductSalesReportDTO> args)
    {
        // Resaltar las tres primeras filas con diferentes colores
        if (args.Data == topProducts.FirstOrDefault())
        {
            args.Attributes.Add("style", "background-color: var(--rz-success-lighter);");
        }
        else if (args.Data == topProducts.Skip(1).FirstOrDefault())
        {
            args.Attributes.Add("style", "background-color: var(--rz-primary-lighter);");
        }
        else if (args.Data == topProducts.Skip(2).FirstOrDefault())
        {
            args.Attributes.Add("style", "background-color: var(--rz-info-lighter);");
        }
    }

    private void ClearData()
    {
        hasSearched = false;
        topProducts.Clear();
        errorMessage = string.Empty;
    }

    private async Task LoadTopProductsReport()
    {
        try
        {
            isLoading = true;
            topProducts.Clear();
            errorMessage = string.Empty;
            hasSearched = true;

            if (endDate < startDate)
            {
                errorMessage = "La fecha final debe ser posterior o igual a la fecha inicial";
                isLoading = false;
                return;
            }

            // Formatear fechas para la API
            string formattedStartDate = startDate.ToString("yyyy-MM-dd");
            string formattedEndDate = endDate.ToString("yyyy-MM-dd");

            var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>(
                $"api/Report/products/top-selling?startDate={formattedStartDate}&endDate={formattedEndDate}&limit={limit}");

            if (response != null && response.Success && response.Data != null)
            {
                try
                {
                    // Intento deserializar el contenido
                    if (response.Data is System.Text.Json.JsonElement jsonElement)
                    {
                        var options = new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true };

                        // Verificar si es un array
                        if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            topProducts = System.Text.Json.JsonSerializer.Deserialize<List<ProductSalesReportDTO>>(
                                jsonElement.GetRawText(), options) ?? new List<ProductSalesReportDTO>();
                        }
                        // Si es un objeto que contiene $values
                        else if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Object &&
                                 jsonElement.TryGetProperty("$values", out var valuesElement))
                        {
                            topProducts = System.Text.Json.JsonSerializer.Deserialize<List<ProductSalesReportDTO>>(
                                valuesElement.GetRawText(), options) ?? new List<ProductSalesReportDTO>();
                        }
                        // Otro tipo de objeto
                        else
                        {
                            // Intentar deserializar igual
                            try
                            {
                                topProducts = System.Text.Json.JsonSerializer.Deserialize<List<ProductSalesReportDTO>>(
                                    jsonElement.GetRawText(), options) ?? new List<ProductSalesReportDTO>();
                            }
                            catch
                            {
                                throw new Exception("El formato de los datos recibidos no es compatible");
                            }
                        }
                    }
                    else
                    {
                        // Convertir a JSON y luego deserializar
                        var jsonData = System.Text.Json.JsonSerializer.Serialize(response.Data);
                        topProducts = System.Text.Json.JsonSerializer.Deserialize<List<ProductSalesReportDTO>>(jsonData,
                            new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<ProductSalesReportDTO>();
                    }

                    // Ordenar por total de ventas (descendente)
                    topProducts = topProducts.OrderByDescending(x => x.TotalSales).ToList();

                    if (topProducts.Any())
                    {
                        NotificationService.Notify(NotificationSeverity.Success, "Éxito",
                            "Reporte generado correctamente", duration: 3000);
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = $"Error al procesar los datos: {ex.Message}";
                }
            }
            else
            {
                errorMessage = response?.ErrorMessage ?? "Error al cargar los datos";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Error al cargar el reporte de productos más vendidos");
        }
        finally
        {
            isLoading = false;
        }
    }
}