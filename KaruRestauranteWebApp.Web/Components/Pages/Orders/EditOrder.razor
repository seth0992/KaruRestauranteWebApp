@page "/orders/edit/{OrderId:int}"
@using Microsoft.AspNetCore.Authorization
@using KaruRestauranteWebApp.Models.Entities.Restaurant
@using KaruRestauranteWebApp.Models.Entities.Orders
@using KaruRestauranteWebApp.Models.Models.Orders
@attribute [Authorize(Roles = "SuperAdmin,Admin,User")]

<RadzenStack Style="max-width: 1400px; margin: 0 auto;">
    <RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" class="mb-4">
        Editar Pedido #@(order?.OrderNumber ?? "")
    </RadzenText>

    @if (!isLoaded)
    {
        <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" class="mb-4" />
    }
    else if (order == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            La orden no fue encontrada o no puede ser editada.
        </RadzenAlert>

        <div class="mt-4">
            <RadzenButton Click="@(() => NavigationManager.NavigateTo("/orders"))" Text="Volver a lista" ButtonStyle="ButtonStyle.Light" />
        </div>
    }
    else
    {
        <RadzenTemplateForm TItem="OrderDTO" Data=@model Submit=@HandleSubmit>
            <!-- Información básica del pedido -->
            <RadzenCard class="mb-4">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Style="width: 60%;">
                        <div style="width: 30%;">
                            <RadzenLabel Component="OrderType" Text="Tipo de Pedido" />
                            <RadzenDropDown @bind-Value=@model.OrderType Name="OrderType"
                                            Data=@orderTypes Style="width: 100%;" class="mb-1"
                                            Change=@OnOrderTypeChanged />
                            <RadzenRequiredValidator Component="OrderType" Text="El tipo de pedido es requerido" />
                        </div>

                        <div style="width: 40%;">
                            <RadzenLabel Component="CustomerID" Text="Cliente" />
                            <div class="d-flex gap-2 align-items-center">
                                <RadzenDropDown @bind-Value=@model.CustomerID Name="CustomerID"
                                                Data=@customers TextProperty="Name" ValueProperty="ID"
                                                AllowClear="true" AllowFiltering="true" Placeholder="Seleccionar cliente"
                                                Style="width: 100%;" class="mb-1" />
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="person_add" Size="ButtonSize.Medium"
                                              Click=@OpenNewCustomerDialog />
                            </div>
                        </div>

                        @if (model.OrderType == "DineIn")
                        {
                            <div style="width: 30%;">
                                <RadzenLabel Component="TableID" Text="Mesa" />
                                <RadzenDropDown @bind-Value=@model.TableID Name="TableID"
                                                Data=@availableTables TextProperty="TableNumber" ValueProperty="ID"
                                                Style="width: 100%;" class="mb-1" />
                                <RadzenRequiredValidator Component="TableID" Text="La mesa es requerida para pedidos en sitio" />
                            </div>
                        }
                    </RadzenStack>

                    <div>
                        <RadzenBadge BadgeStyle="@GetOrderStatusBadgeStyle(model.OrderStatus)"
                                     Text="@GetOrderStatusText(model.OrderStatus)" class="me-2" />
                        <RadzenBadge BadgeStyle="@GetPaymentStatusBadgeStyle(model.PaymentStatus)"
                                     Text="@GetPaymentStatusText(model.PaymentStatus)" />
                    </div>
                </RadzenStack>
            </RadzenCard>

            <!-- Contenedor principal -->
            <div class="d-flex gap-4 mb-4" style="min-height: 500px;">
                <!-- Panel izquierdo: Catálogo de productos -->
                <RadzenCard Style="width: 60%; height: 100%;">
                    <RadzenTabs>
                        <Tabs>
                            <RadzenTabsItem Text="Productos">
                                <RadzenStack Gap="1rem" class="mt-3">
                                    <RadzenTextBox Placeholder="Buscar productos..." @oninput=@SearchProducts class="w-100 mb-2" />

                                    <RadzenTabs RenderMode="TabRenderMode.Client">
                                        <Tabs>
                                            <RadzenTabsItem Text="Todos">
                                                <div class="d-flex flex-wrap gap-3 mt-3">
                                                    @foreach (var product in filteredProducts)
                                                    {
                                                        <div class="product-card" @onclick="() => AddProductToOrder(product)">
                                                            <div class="product-image">
                                                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                                                {
                                                                    <RadzenImage Path="@product.ImageUrl" Style="width: 80px; height: 80px; object-fit: cover;" />
                                                                }
                                                                else
                                                                {
                                                                    <RadzenIcon Icon="restaurant" Style="width: 80px; height: 80px; font-size: 40px;" />
                                                                }
                                                            </div>
                                                            <div class="product-info">
                                                                <RadzenText TextStyle="TextStyle.Body1" class="mb-0">@product.Name</RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Body2" class="mb-0">@product.SellingPrice.ToString("₡#,##0.00")</RadzenText>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </RadzenTabsItem>

                                            @foreach (var category in categories)
                                            {
                                                <RadzenTabsItem Text="@category.Name">
                                                    <div class="d-flex flex-wrap gap-3 mt-3">
                                                        @foreach (var product in products.Where(p => p.CategoryID == category.ID && p.IsAvailable))
                                                        {
                                                            <div class="product-card" @onclick="() => AddProductToOrder(product)">
                                                                <div class="product-image">
                                                                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                                                                    {
                                                                        <RadzenImage Path="@product.ImageUrl" Style="width: 80px; height: 80px; object-fit: cover;" />
                                                                    }
                                                                    else
                                                                    {
                                                                        <RadzenIcon Icon="restaurant" Style="width: 80px; height: 80px; font-size: 40px;" />
                                                                    }
                                                                </div>
                                                                <div class="product-info">
                                                                    <RadzenText TextStyle="TextStyle.Body1" class="mb-0">@product.Name</RadzenText>
                                                                    <RadzenText TextStyle="TextStyle.Body2" class="mb-0">@product.SellingPrice.ToString("₡#,##0.00")</RadzenText>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </RadzenTabsItem>
                                            }
                                        </Tabs>
                                    </RadzenTabs>
                                </RadzenStack>
                            </RadzenTabsItem>

                            <RadzenTabsItem Text="Combos">
                                <RadzenStack Gap="1rem" class="mt-3">
                                    <RadzenTextBox Placeholder="Buscar combos..." @oninput=@SearchCombos class="w-100 mb-2" />

                                    <div class="d-flex flex-wrap gap-3">
                                        @foreach (var combo in filteredCombos)
                                        {
                                            <div class="product-card" @onclick="() => AddComboToOrder(combo)">
                                                <div class="product-image">
                                                    @if (!string.IsNullOrEmpty(combo.ImageUrl))
                                                    {
                                                        <RadzenImage Path="@combo.ImageUrl" Style="width: 80px; height: 80px; object-fit: cover;" />
                                                    }
                                                    else
                                                    {
                                                        <RadzenIcon Icon="fastfood" Style="width: 80px; height: 80px; font-size: 40px;" />
                                                    }
                                                </div>
                                                <div class="product-info">
                                                    <RadzenText TextStyle="TextStyle.Body1" class="mb-0">@combo.Name</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.Body2" class="mb-0">@combo.SellingPrice.ToString("₡#,##0.00")</RadzenText>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </RadzenStack>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </RadzenCard>

                <!-- Panel derecho: Detalles del pedido -->
                <RadzenCard Style="width: 40%; height: 100%;">
                    <RadzenText TextStyle="TextStyle.H6" class="mb-3">Detalle del Pedido</RadzenText>

                    @if (!model.OrderDetails.Any())
                    {
                        <RadzenAlert Severity="Severity.Info" AllowClose="false" class="my-3">
                            <div class="d-flex align-items-center">
                                <RadzenIcon Icon="info" class="me-2" />
                                <span>Seleccione productos o combos del catálogo</span>
                            </div>
                        </RadzenAlert>
                    }
                    else
                    {
                        <div class="order-details-container">
                            @foreach (var detail in model.OrderDetails)
                            {
                                <div class="order-item">
                                    <div class="d-flex justify-content-between align-items-start mb-1">
                                        <div class="d-flex align-items-center">
                                            <RadzenBadge BadgeStyle="@(detail.ItemType == "Product" ? BadgeStyle.Info : BadgeStyle.Success)"
                                                         Text="@(detail.ItemType == "Product" ? "P" : "C")" class="me-2" />
                                            <RadzenText TextStyle="TextStyle.Body1">@detail.ItemName</RadzenText>
                                        </div>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small"
                                                      Click=@(() => RemoveOrderDetail(detail)) Variant="Variant.Text" />
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <div class="d-flex align-items-center" style="width: 120px;">
                                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="remove" Size="ButtonSize.Small"
                                                          Click=@(() => DecreaseQuantity(detail)) Variant="Variant.Flat"
                                                          Disabled="@(detail.Quantity <= 1)" />
                                            <span class="mx-2">@detail.Quantity</span>
                                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="add" Size="ButtonSize.Small"
                                                          Click=@(() => IncreaseQuantity(detail)) Variant="Variant.Flat" />
                                        </div>

                                        <div class="d-flex align-items-center">
                                            <RadzenText TextStyle="TextStyle.Body2" class="me-2">@detail.UnitPrice.ToString("₡#,##0.00") x @detail.Quantity</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body1" Style="min-width: 100px; text-align: right;">@detail.SubTotal.ToString("₡#,##0.00")</RadzenText>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        @if (detail.ItemType == "Product" && CanCustomize(detail))
                                        {
                                            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="tune" Text="Personalizar" Size="ButtonSize.Small"
                                                          Click=@(() => OpenCustomizationDialog(detail)) Variant="Variant.Flat" />
                                        }
                                        else
                                        {
                                            <div></div>
                                        }

                                        <RadzenTextBox @bind-Value=@detail.Notes Placeholder="Notas..." Style="width: 60%;" />
                                    </div>

                                    @if (detail.Customizations.Any())
                                    {
                                        <div class="customizations-container">
                                            @foreach (var customization in detail.Customizations)
                                            {
                                                <div class="customization-item">
                                                    <RadzenBadge BadgeStyle="@GetCustomizationBadgeStyle(customization.CustomizationType)"
                                                                 Text="@customization.CustomizationType" />
                                                    <span>@customization.IngredientName x @customization.Quantity</span>
                                                    @if (customization.ExtraCharge > 0)
                                                    {
                                                        <span class="ms-auto">+@customization.ExtraCharge.ToString("₡#,##0.00")</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }

                                    <hr />
                                </div>
                            }
                        </div>

                        <div class="order-summary">
                            <div class="d-flex justify-content-between mb-2">
                                <RadzenText TextStyle="TextStyle.Body1">Subtotal:</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">@CalculateSubtotal().ToString("₡#,##0.00")</RadzenText>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <RadzenText TextStyle="TextStyle.Body1">IVA (13%):</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">@CalculateTax().ToString("₡#,##0.00")</RadzenText>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <RadzenLabel Component="DiscountAmount" Text="Descuento:" />
                                <RadzenNumeric @bind-Value=@model.DiscountAmount Min="0" TValue="decimal" Format="₡#,##0.00"
                                               Change="@(() => CalculateTotal())" />
                            </div>
                            <hr />
                            <div class="d-flex justify-content-between">
                                <RadzenText TextStyle="TextStyle.H6">Total:</RadzenText>
                                <RadzenText TextStyle="TextStyle.H6">@CalculateTotal().ToString("₡#,##0.00")</RadzenText>
                            </div>
                        </div>
                    }

                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" class="mt-4">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar Cambios" Icon="save" ButtonStyle="ButtonStyle.Primary" />

                        @if (model.PaymentStatus != "Paid" && model.OrderDetails.Any())
                        {
                            <RadzenButton Click=@ProcessPayment Text="Procesar Pago" Icon="payment" ButtonStyle="ButtonStyle.Success" />
                        }

                        <RadzenButton Click=@(() => NavigationManager.NavigateTo("/orders"))
                                      Text="Cancelar" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenCard>
            </div>

            <!-- Notas adicionales -->
            <RadzenCard class="mb-4">
                <RadzenLabel Component="Notes" Text="Notas del Pedido" />
                <RadzenTextArea @bind-Value=@model.Notes Name="Notes"
                                Style="width: 100%;" class="mb-1" Rows="2" />
            </RadzenCard>
        </RadzenTemplateForm>
    }
</RadzenStack>

<style>
    .product-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 140px;
        cursor: pointer;
        transition: all 0.2s;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-color: var(--rz-primary);
        }

    .product-image {
        margin-bottom: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .product-info {
        text-align: center;
        width: 100%;
    }

    .order-details-container {
        max-height: 350px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .order-item {
        margin-bottom: 10px;
    }

    .customizations-container {
        background-color: #f9f9f9;
        border-radius: 4px;
        padding: 8px;
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .customization-item {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 4px;
        font-size: 13px;
    }
</style>