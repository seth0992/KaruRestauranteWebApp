@page "/inventory/ingredients/create"
@using KaruRestauranteWebApp.Models.Entities.Restaurant
@using KaruRestauranteWebApp.Models.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SuperAdmin, Admin")]

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Crear Ingrediente</h3>
        </div>
    </div>

    <EditForm Model="@ingredient" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Nombre</label>
                <InputText @bind-Value="ingredient.Name" class="form-control" />
                <ValidationMessage For="@(() => ingredient.Name)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Unidad de Medida</label>
                <InputSelect @bind-Value="ingredient.UnitOfMeasure" class="form-select">
                    <option value="">Seleccione...</option>
                    <option value="g">Gramos (g)</option>
                    <option value="kg">Kilogramos (kg)</option>
                    <option value="ml">Mililitros (ml)</option>
                    <option value="l">Litros (l)</option>
                    <option value="unidad">Unidades</option>
                </InputSelect>
                <ValidationMessage For="@(() => ingredient.UnitOfMeasure)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Stock Inicial</label>
                <InputNumber @bind-Value="ingredient.StockQuantity" class="form-control" />
                <ValidationMessage For="@(() => ingredient.StockQuantity)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Stock Mínimo</label>
                <InputNumber @bind-Value="ingredient.MinimumStock" class="form-control" />
                <ValidationMessage For="@(() => ingredient.MinimumStock)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Costo Unitario</label>
                <InputNumber @bind-Value="ingredient.PurchasePrice" class="form-control" />
                <ValidationMessage For="@(() => ingredient.PurchasePrice)" />
            </div>
            <div class="col-md-12">
                <label class="form-label">Descripción</label>
                <InputTextArea @bind-Value="ingredient.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => ingredient.Description)" />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <button type="submit" class="btn btn-primary">Guardar</button>
                <a href="/inventory/ingredients" class="btn btn-secondary ms-2">Cancelar</a>
            </div>
        </div>
    </EditForm>
</div>

@code{
    private IngredientModel ingredient = new()
        {
            IsActive = true,
            CreatedAt = DateTime.UtcNow
        };
    
    [Inject]
    public required ApiClient ApiClient { get; set; }

    [Inject]
    public required IToastService ToastService { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }


    private async Task HandleSubmit()
    {
        try
        {
            var response = await ApiClient.PostAsync<BaseResponseModel, IngredientModel>(
                "api/Inventory/ingredients", ingredient);

            if (response?.Success == true)
            {
                ToastService.ShowSuccess("Ingrediente creado exitosamente");
                NavigationManager.NavigateTo("/inventory/ingredients");
            }
            else
            {
                ToastService.ShowError(response?.ErrorMessage ?? "Error al crear el ingrediente");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }
}