@using KaruRestauranteWebApp.Models.Models
@using KaruRestauranteWebApp.Models.Models.CashRegister
@using System.Text.Json
@inject ApiClient ApiClient
@inject DialogService DialogService
@inject IToastService ToastService

<RadzenTemplateForm TItem="CashRegisterSessionDTO" Data="@model" Submit="Submit" class="rz-p-0">
    <RadzenStack Gap="1rem">
        <RadzenRow>
            <RadzenColumn Size="12">
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.Subtitle2">Montos Finales</RadzenText>
                    <RadzenRow>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Colones (₡)</RadzenText>
                            <RadzenStack>
                                <RadzenFormField Text="Billetes" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalBillsCRC" Name="FinalBillsCRC"
                                                   Min="0" Placeholder="Monto en billetes"
                                                   Change="@OnColonesChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Monedas" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalCoinsCRC" Name="FinalCoinsCRC"
                                                   Min="0" Placeholder="Monto en monedas"
                                                   Change="@OnColonesChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Total en Colones" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalAmountCRC" Name="FinalAmountCRC"
                                                   Min="0" Placeholder="Monto total en colones" Disabled="true"
                                                   class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mt-3">Balance Esperado</RadzenText>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2">Monto Inicial:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2">₡ @FormatAmount(InitialDataCRC)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2">Ventas en Efectivo:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2">₡ @FormatAmount(CurrentBalanceCRC - InitialDataCRC)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2" style="font-weight: bold;">Balance Esperado:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2" style="font-weight: bold;">₡ @FormatAmount(CurrentBalanceCRC)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2">Diferencia:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2" class="@GetDifferenceClass(model.FinalAmountCRC, CurrentBalanceCRC)">
                                            ₡ @FormatAmount(GetDifference(model.FinalAmountCRC, CurrentBalanceCRC))
                                        </RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Dólares ($)</RadzenText>
                            <RadzenStack>
                                <RadzenFormField Text="Billetes" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalBillsUSD" Name="FinalBillsUSD"
                                                   Min="0" Placeholder="Monto en billetes"
                                                   Change="@OnDolaresChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Monedas" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalCoinsUSD" Name="FinalCoinsUSD"
                                                   Min="0" Placeholder="Monto en monedas"
                                                   Change="@OnDolaresChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Total en Dólares" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalAmountUSD" Name="FinalAmountUSD"
                                                   Min="0" Placeholder="Monto total en dólares" Disabled="true"
                                                   class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mt-3">Balance Esperado</RadzenText>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2">Monto Inicial:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2">$ @FormatAmount(InitialDataUSD)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2">Ventas en Efectivo:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2">$ @FormatAmount(CurrentBalanceUSD - InitialDataUSD)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2" style="font-weight: bold;">Balance Esperado:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2" style="font-weight: bold;">$ @FormatAmount(CurrentBalanceUSD)</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow>
                                    <RadzenColumn Size="6">
                                        <RadzenText TextStyle="TextStyle.Body2">Diferencia:</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" class="rz-text-align-end">
                                        <RadzenText TextStyle="TextStyle.Body2" class="@GetDifferenceClass(model.FinalAmountUSD, CurrentBalanceUSD)">
                                            $ @FormatAmount(GetDifference(model.FinalAmountUSD, CurrentBalanceUSD))
                                        </RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenFormField Text="Notas (Opcional)" Variant="Variant.Outlined">
                        <RadzenTextArea @bind-Value="@model.Notes" Name="Notes" Placeholder="Notas adicionales"
                                        class="w-100" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Light" ShowIcon="true">
            Al cerrar la caja, no se podrán registrar más movimientos en esta sesión. ¿Está seguro de cerrar la caja?
        </RadzenAlert>

        <RadzenButton ButtonType="ButtonType.Submit" Text="Cerrar Caja" ButtonStyle="ButtonStyle.Primary"
                      Icon="check" class="rz-mt-4" />
        <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Icon="close" Click="Cancel" class="rz-mt-2" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public int SessionId { get; set; }

    [Parameter]
    public decimal InitialDataCRC { get; set; }

    [Parameter]
    public decimal InitialDataUSD { get; set; }

    [Parameter]
    public decimal CurrentBalanceCRC { get; set; }

    [Parameter]
    public decimal CurrentBalanceUSD { get; set; }

    private CashRegisterSessionDTO model = new CashRegisterSessionDTO();
    private bool loading = false;
    private bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        initialized = true;
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            model = new CashRegisterSessionDTO
                {
                    ID = SessionId,
                    ClosingDate = DateTime.Now,
                    InitialAmountCRC = InitialDataCRC,
                    InitialAmountUSD = InitialDataUSD,
                    Status = "Closed",
                    FinalAmountCRC = CurrentBalanceCRC,
                    FinalAmountUSD = CurrentBalanceUSD,
                    FinalBillsCRC = Math.Round(CurrentBalanceCRC * 0.9m, 2),
                    FinalCoinsCRC = Math.Round(CurrentBalanceCRC * 0.1m, 2),
                    FinalBillsUSD = Math.Round(CurrentBalanceUSD * 0.9m, 2),
                    FinalCoinsUSD = Math.Round(CurrentBalanceUSD * 0.1m, 2)
                };

            // Ajustar el modelo para asegurar valores no nulos
            if (model.FinalAmountCRC == 0) model.FinalAmountCRC = 0;
            if (model.FinalAmountUSD == 0) model.FinalAmountUSD = 0;
            if (model.FinalBillsCRC == 0) model.FinalBillsCRC = 0;
            if (model.FinalCoinsCRC == 0) model.FinalCoinsCRC = 0;
            if (model.FinalBillsUSD == 0) model.FinalBillsUSD = 0;
            if (model.FinalCoinsUSD == 0) model.FinalCoinsUSD = 0;
        }
        catch (Exception ex)
        {
            if (initialized)
            {
                ToastService.ShowError($"Error al inicializar formulario: {ex.Message}");
            }
        }
    }

    private void OnColonesChange()
    {
        try
        {
            model.FinalAmountCRC = (model.FinalBillsCRC ?? 0) + (model.FinalCoinsCRC ?? 0);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            if (initialized)
            {
                ToastService.ShowError($"Error al calcular total en colones: {ex.Message}");
            }
        }
    }

    private void OnDolaresChange()
    {
        try
        {
            model.FinalAmountUSD = (model.FinalBillsUSD ?? 0) + (model.FinalCoinsUSD ?? 0);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            if (initialized)
            {
                ToastService.ShowError($"Error al calcular total en dólares: {ex.Message}");
            }
        }
    }

    private string FormatAmount(decimal amount)
    {
        return amount.ToString("N2");
    }

    private decimal GetDifference(decimal? actual, decimal expected)
    {
        return (actual ?? 0) - expected;
    }

    private string GetDifferenceClass(decimal? actual, decimal expected)
    {
        decimal difference = (actual ?? 0) - expected;
        if (difference > 0) return "rz-color-success";
        if (difference < 0) return "rz-color-danger";
        return "";
    }

    private async Task Submit()
    {
        loading = true;
        bool closed = false;

        try
        {
            // Validar que los montos no sean nulos
            model.FinalAmountCRC ??= 0;
            model.FinalAmountUSD ??= 0;
            model.FinalBillsCRC ??= 0;
            model.FinalCoinsCRC ??= 0;
            model.FinalBillsUSD ??= 0;
            model.FinalCoinsUSD ??= 0;
            model.Notes ??= string.Empty;

            // Añadir información sobre la diferencia a las notas si existe
            decimal difCRC = GetDifference(model.FinalAmountCRC, CurrentBalanceCRC);
            decimal difUSD = GetDifference(model.FinalAmountUSD, CurrentBalanceUSD);

            if (difCRC != 0 || difUSD != 0)
            {
                string notaDiferencia = $"\n[Sistema] Diferencia en cierre: ";
                if (difCRC != 0)
                {
                    notaDiferencia += $"₡ {difCRC:N2} ";
                }

                if (difUSD != 0)
                {
                    notaDiferencia += $"$ {difUSD:N2}";
                }

                // Añadir la información a las notas
                model.Notes = string.IsNullOrEmpty(model.Notes)
                    ? notaDiferencia
                    : model.Notes + notaDiferencia;
            }

            var response = await ApiClient.PostAsync<BaseResponseModel, CashRegisterSessionDTO>($"api/CashRegister/sessions/{SessionId}/close", model);
            if (response != null && response.Success)
            {
                closed = true;
                DialogService.Close(true);
            }
            else
            {
                ToastService.ShowError(response?.ErrorMessage ?? "Error al cerrar la caja");
            }
        }
        catch (Exception ex)
        {
            if (initialized && !closed)
            {
                ToastService.ShowError($"Error al cerrar la caja: {ex.Message}");
            }
        }
        finally
        {
            loading = false;
        }
    }

    private void Cancel()
    {
        if (initialized)
        {
            DialogService.Close(false);
        }
    }
}