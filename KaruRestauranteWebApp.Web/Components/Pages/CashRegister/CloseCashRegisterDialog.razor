@using KaruRestauranteWebApp.Models.Models
@using KaruRestauranteWebApp.Models.Models.CashRegister
@inject ApiClient ApiClient
@inject DialogService DialogService
@inject IToastService ToastService

<RadzenTemplateForm TItem="CashRegisterSessionDTO" Data="@model" Submit="Submit" class="rz-p-0">
    <RadzenStack Gap="1rem">
        <RadzenRow>
            <RadzenColumn Size="12">
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.Subtitle2">Montos Finales</RadzenText>
                    <RadzenRow>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Colones (₡)</RadzenText>
                            <RadzenStack>
                                <RadzenFormField Text="Billetes" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalBillsCRC" Name="FinalBillsCRC"
                                                   Min="0" Placeholder="Monto en billetes"
                                                   Change="@OnColonesChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Monedas" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalCoinsCRC" Name="FinalCoinsCRC"
                                                   Min="0" Placeholder="Monto en monedas"
                                                   Change="@OnColonesChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Total en Colones" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalAmountCRC" Name="FinalAmountCRC"
                                                   Min="0" Placeholder="Monto total en colones" Disabled="true"
                                                   class="w-100" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Dólares ($)</RadzenText>
                            <RadzenStack>
                                <RadzenFormField Text="Billetes" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalBillsUSD" Name="FinalBillsUSD"
                                                   Min="0" Placeholder="Monto en billetes"
                                                   Change="@OnDolaresChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Monedas" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalCoinsUSD" Name="FinalCoinsUSD"
                                                   Min="0" Placeholder="Monto en monedas"
                                                   Change="@OnDolaresChange" class="w-100" TValue="decimal?" />
                                </RadzenFormField>
                                <RadzenFormField Text="Total en Dólares" Variant="Variant.Outlined">
                                    <RadzenNumeric @bind-Value="@model.FinalAmountUSD" Name="FinalAmountUSD"
                                                   Min="0" Placeholder="Monto total en dólares" Disabled="true"
                                                   class="w-100" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenFormField Text="Notas (Opcional)" Variant="Variant.Outlined">
                        <RadzenTextArea @bind-Value="@model.Notes" Name="Notes" Placeholder="Notas adicionales"
                                        class="w-100" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Light" ShowIcon="true">
            Al cerrar la caja, no se podrán registrar más movimientos en esta sesión. ¿Está seguro de cerrar la caja?
        </RadzenAlert>

        <RadzenButton ButtonType="ButtonType.Submit" Text="Cerrar Caja" ButtonStyle="ButtonStyle.Primary"
                      Icon="check" class="rz-mt-4" />
        <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Light" Icon="close" Click="Cancel" class="rz-mt-2" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public int SessionId { get; set; }

    [Parameter]
    public decimal InitialDataCRC { get; set; }

    [Parameter]
    public decimal InitialDataUSD { get; set; }

    private CashRegisterSessionDTO model = new CashRegisterSessionDTO();
    private bool loading = false;

    protected override async Task OnParametersSetAsync()
    {
        model = new CashRegisterSessionDTO
            {
                ID = SessionId,
                ClosingDate = DateTime.Now,
                InitialAmountCRC = InitialDataCRC,
                InitialAmountUSD = InitialDataUSD,
                Status = "Closed",
                FinalAmountCRC = 0,
                FinalAmountUSD = 0,
                FinalBillsCRC = 0,
                FinalCoinsCRC = 0,
                FinalBillsUSD = 0,
                FinalCoinsUSD = 0
            };

        // Opcionalmente cargar el balance actual para sugerir como valor final
        await LoadCurrentBalance();
    }

    private async Task LoadCurrentBalance()
    {
        try
        {
            var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>("api/CashRegister/balance");
            if (response != null && response.Success && response.Data != null)
            {
                var balanceData = System.Text.Json.JsonSerializer.Deserialize<dynamic>(
                    response.Data.ToString() ?? "",
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (balanceData != null)
                {
                    decimal balanceCRC = balanceData.GetProperty("balanceCRC").GetDecimal();
                    decimal balanceUSD = balanceData.GetProperty("balanceUSD").GetDecimal();

                    model.FinalAmountCRC = balanceCRC;
                    model.FinalAmountUSD = balanceUSD;

                    // Proponer una distribución inicial 90% billetes, 10% monedas
                    model.FinalBillsCRC = Math.Round(balanceCRC * 0.9m, 2);
                    model.FinalCoinsCRC = Math.Round(balanceCRC * 0.1m, 2);
                    model.FinalBillsUSD = Math.Round(balanceUSD * 0.9m, 2);
                    model.FinalCoinsUSD = Math.Round(balanceUSD * 0.1m, 2);
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowWarning($"No se pudo cargar el balance actual: {ex.Message}");
        }
    }

    private void OnColonesChange()
    {
        model.FinalAmountCRC = model.FinalBillsCRC + model.FinalCoinsCRC;
        StateHasChanged();
    }

    private void OnDolaresChange()
    {
        model.FinalAmountUSD = model.FinalBillsUSD + model.FinalCoinsUSD;
        StateHasChanged();
    }

    private async Task Submit()
    {
        loading = true;
        try
        {
            var response = await ApiClient.PostAsync<BaseResponseModel, CashRegisterSessionDTO>($"api/CashRegister/sessions/{SessionId}/close", model);
            if (response != null && response.Success)
            {
                DialogService.Close(true);
            }
            else
            {
                ToastService.ShowError(response?.ErrorMessage ?? "Error al cerrar la caja");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cerrar la caja: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }
}