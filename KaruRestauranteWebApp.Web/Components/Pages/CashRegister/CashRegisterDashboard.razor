@page "/cash-register"
@using KaruRestauranteWebApp.Models.Models
@using KaruRestauranteWebApp.Models.Models.CashRegister
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject ApiClient ApiClient
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@attribute [Authorize(Roles = "SuperAdmin,Admin,User")]

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0.5rem">
        <RadzenColumn Size="8">
            <RadzenText Text="Control de Caja Chica" TextStyle="TextStyle.H4" />
        </RadzenColumn>
        <RadzenColumn Size="4" class="rz-text-align-end">
            @if (currentSession == null)
            {
                <RadzenButton Click="@OpenCashRegisterModal" Text="Abrir Caja" Icon="add_box" ButtonStyle="ButtonStyle.Success" />
            }
            else
            {
                <RadzenButton Click="@CloseCashRegisterModal" Text="Cerrar Caja" Icon="close" ButtonStyle="ButtonStyle.Danger" />
                <RadzenButton Click="@OpenTransactionModal" Text="Registrar Movimiento" Icon="monetization_on" ButtonStyle="ButtonStyle.Primary" 
                    class="rz-ml-2" />
            }
        </RadzenColumn>
    </RadzenRow>
    
    <RadzenCard>
        @if (loading)
        {
            <RadzenProgressBar Value="100" Mode="ProgressBarMode.Indeterminate" />
        }
        else if (currentSession == null)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" Variant="Variant.Flat">
                No hay una sesión de caja abierta. Para comenzar operaciones, abra una nueva sesión de caja.
            </RadzenAlert>
        }
        else
        {
            <RadzenStack Gap="1rem">
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenCard class="rz-p-4 rz-shadow-2">
                            <RadzenStack>
                                <RadzenText TextStyle="TextStyle.H6">Balance en Colones</RadzenText>
                                <RadzenText TextStyle="TextStyle.DisplayH6" class="rz-color-success">
                                    ₡ @FormatAmount(currentSession.CurrentBalanceCRC)
                                </RadzenText>
                                <RadzenRow>
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Apertura</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">₡ @FormatAmount(currentSession.InitialAmountCRC)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Diferencia</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1" class="@GetBalanceColorClass(currentSession.CurrentBalanceCRC - currentSession.InitialAmountCRC)">
                                            ₡ @FormatAmount(currentSession.CurrentBalanceCRC - currentSession.InitialAmountCRC)
                                        </RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenCard class="rz-p-4 rz-shadow-2">
                            <RadzenStack>
                                <RadzenText TextStyle="TextStyle.H6">Balance en Dólares</RadzenText>
                                <RadzenText TextStyle="TextStyle.DisplayH6" class="rz-color-success">
                                    $ @FormatAmount(currentSession.CurrentBalanceUSD)
                                </RadzenText>
                                <RadzenRow>
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Apertura</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">$ @FormatAmount(currentSession.InitialAmountUSD)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenText TextStyle="TextStyle.Subtitle2">Diferencia</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1" class="@GetBalanceColorClass(currentSession.CurrentBalanceUSD - currentSession.InitialAmountUSD)">
                                            $ @FormatAmount(currentSession.CurrentBalanceUSD - currentSession.InitialAmountUSD)
                                        </RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenCard class="rz-p-4 rz-shadow-2">
                            <RadzenStack>
                                <RadzenText TextStyle="TextStyle.H6">Información de Sesión</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Abierta por:</strong> @currentSession.OpeningUserName
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1">
                                    <strong>Apertura:</strong> @currentSession.OpeningDate.ToString("dd/MM/yyyy HH:mm")
                                </RadzenText>
                                <RadzenButton Click="@RefreshDashboard" Text="Actualizar" ButtonStyle="ButtonStyle.Light" 
                                    Icon="refresh" Size="ButtonSize.Medium" class="rz-mt-2" />
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenText TextStyle="TextStyle.H5" class="rz-mt-4">Movimientos de la sesión actual</RadzenText>
                
                <RadzenDataGrid Data="@transactions" TItem="CashRegisterTransactionDTO" AllowSorting="true" 
                               AllowFiltering="true" AllowPaging="true" PageSize="10" 
                               IsLoading="@loadingTransactions" EmptyText="No hay movimientos registrados">
                    <Columns>
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="TransactionDate" Title="Fecha" FormatString="{0:dd/MM/yyyy HH:mm}" />
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="TransactionType" Title="Tipo">
                            <Template Context="data">
                                @if (data.TransactionType == "Income")
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Ingreso" />
                                }
                                else
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="Gasto" />
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="Description" Title="Descripción" />
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="AmountCRC" Title="Colones" FormatString="₡ {0:N2}" />
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="AmountUSD" Title="Dólares" FormatString="$ {0:N2}" />
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="PaymentMethod" Title="Método de Pago" />
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Property="UserName" Title="Usuario" />
                        <RadzenDataGridColumn TItem="CashRegisterTransactionDTO" Width="80px" Sortable="false" Filterable="false">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small"
                                              Click="@(() => DeleteTransaction(data.ID))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        }
    </RadzenCard>
</RadzenStack>

@* <!-- Modal para Abrir Caja -->
<RadzenDialog /> *@

@code {
    private bool loading = true;
    private bool loadingTransactions = true;
    private CashRegisterSessionDTO? currentSession;
    private List<CashRegisterTransactionDTO> transactions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        await LoadCurrentSession();
        loading = false;
    }

    private async Task LoadCurrentSession()
    {
        try
        {
            var response = await ApiClient.GetFromJsonAsync<BaseResponseModel>("api/CashRegister/sessions/current");
            if (response != null && response.Success)
            {
                currentSession = System.Text.Json.JsonSerializer.Deserialize<CashRegisterSessionDTO>(
                    response.Data.ToString() ?? "",
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (currentSession != null)
                {
                    await LoadTransactions(currentSession.ID);
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar la sesión actual: {ex.Message}");
        }
    }
    private async Task LoadTransactions(int sessionId)
    {
        loadingTransactions = true;
        try
        {
            transactions = await ApiClient.GetNestedListAsync<CashRegisterTransactionDTO>($"api/CashRegister/transactions/session/{sessionId}");
            Console.WriteLine($"Transacciones cargadas: {transactions.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en LoadTransactions: {ex}");
            ToastService.ShowError($"Error al cargar transacciones: {ex.Message}");
            transactions = new List<CashRegisterTransactionDTO>();
        }
        loadingTransactions = false;
    }

    private async Task RefreshDashboard()
    {
        await LoadData();
        ToastService.ShowSuccess("Datos actualizados");
    }

    private string FormatAmount(decimal amount)
    {
        return amount.ToString("N2");
    }

    private string GetBalanceColorClass(decimal difference)
    {
        if (difference > 0) return "rz-color-success";
        if (difference < 0) return "rz-color-danger";
        return "";
    }

    private async Task DeleteTransaction(int id)
    {
        try
        {
            var confirmResult = await DialogService.Confirm("¿Está seguro de que desea eliminar esta transacción?",
                                                       "Eliminar Transacción",
                                                       new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "No" });

            if (confirmResult == true)
            {
                var response = await ApiClient.DeleteAsync<BaseResponseModel>($"api/CashRegister/transactions/{id}");
                if (response != null && response.Success)
                {
                    ToastService.ShowSuccess("Transacción eliminada exitosamente");
                    await RefreshDashboard();
                }
                else
                {
                    ToastService.ShowError(response?.ErrorMessage ?? "Error al eliminar la transacción");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al eliminar la transacción: {ex.Message}");
        }
    }

    private async Task OpenCashRegisterModal()
    {
        var result = await DialogService.OpenAsync<OpenCashRegisterDialog>("Abrir Caja",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "700px", Height = "550px", CloseDialogOnOverlayClick = false });

        if (result == true)
        {
            await LoadData();
            ToastService.ShowSuccess("Caja abierta exitosamente");
        }
    }

    private async Task CloseCashRegisterModal()
    {
        if (currentSession == null) return;

        var result = await DialogService.OpenAsync<CloseCashRegisterDialog>("Cerrar Caja",
            new Dictionary<string, object> { { "SessionId", currentSession.ID }, { "InitialDataCRC", currentSession.InitialAmountCRC }, { "InitialDataUSD", currentSession.InitialAmountUSD } },
            new DialogOptions { Width = "700px", Height = "550px", CloseDialogOnOverlayClick = false });

        if (result == true)
        {
            ToastService.ShowSuccess("Caja cerrada exitosamente");
            await LoadData();
        }
    }

    private async Task OpenTransactionModal()
    {
        if (currentSession == null) return;

        var result = await DialogService.OpenAsync<CreateTransactionDialog>("Registrar Movimiento",
            new Dictionary<string, object> { { "SessionId", currentSession.ID } },
            new DialogOptions { Width = "700px", Height = "570px", CloseDialogOnOverlayClick = false });

        if (result == true)
        {
            await LoadData();
            ToastService.ShowSuccess("Movimiento registrado exitosamente");
        }
    }

    [Inject]
    private DialogService DialogService { get; set; } = default!;
}